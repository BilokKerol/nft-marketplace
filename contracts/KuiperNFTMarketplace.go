// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contracts

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// KuiperNFTMarketplaceListNFT is an auto generated low-level Go binding around an user-defined struct.
type KuiperNFTMarketplaceListNFT struct {
	Nft      common.Address
	TokenId  *big.Int
	Seller   common.Address
	PayToken common.Address
	Price    *big.Int
	Sold     bool
}

// KuiperNFTMarketplaceMetaData contains all meta data concerning the KuiperNFTMarketplace contract.
var KuiperNFTMarketplaceMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"},{\"internalType\":\"contractIKuiperNFTFactory\",\"name\":\"_kuiperNFTFactory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nftOwner\",\"type\":\"address\"}],\"name\":\"AcceptedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"}],\"name\":\"BoughtNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"}],\"name\":\"CanceledOfferredNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endTime\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"}],\"name\":\"CreatedAuction\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"}],\"name\":\"ListedNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"offerPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"offerer\",\"type\":\"address\"}],\"name\":\"OfferredNFT\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bidPrice\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"PlacedBid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"creator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"}],\"name\":\"ResultedAuction\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_offerer\",\"type\":\"address\"}],\"name\":\"acceptOfferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"addPayableToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_bidPrice\",\"type\":\"uint256\"}],\"name\":\"bidPlace\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"buyNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculatePlatformFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_royalty\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"calculateRoyalty\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelListedNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelOfferNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeRecipient\",\"type\":\"address\"}],\"name\":\"changeFeeRecipient\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_payableToken\",\"type\":\"address\"}],\"name\":\"checkIsPayableToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minBid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_startTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"createAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getListedNFT\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"sold\",\"type\":\"bool\"}],\"internalType\":\"structKuiperNFTMarketplace.ListNFT\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPayableTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"listNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_payToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_offerPrice\",\"type\":\"uint256\"}],\"name\":\"offerNFT\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nft\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"resultAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_platformFee\",\"type\":\"uint256\"}],\"name\":\"updatePlatformFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60a06040523480156200001157600080fd5b506040516200372c3803806200372c83398101604081905262000034916200012f565b6200003f33620000c6565b600180556127108311156200009a5760405162461bcd60e51b815260206004820152601a60248201527f63616e2774206d6f7265207468616e2031302070657263656e74000000000000604482015260640160405180910390fd5b600292909255600380546001600160a01b0319166001600160a01b039283161790551660805262000177565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6001600160a01b03811681146200012c57600080fd5b50565b6000806000606084860312156200014557600080fd5b835192506020840151620001598162000116565b60408501519092506200016c8162000116565b809150509250925092565b60805161359962000193600039600061215801526135996000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c80638da5cb5b116100b8578063d863a1a71161007c578063d863a1a714610296578063dc3c3dfd146102a9578063dcbb63e6146103b9578063eb95711b146103cc578063f01ade78146103df578063f2fde38b146103f257600080fd5b80638da5cb5b14610206578063981b836c146102215780639d8f4f5514610234578063aa0b598814610270578063b0708a351461028357600080fd5b806346f5ab31116100ff57806346f5ab31146101b05780635b5b3314146101c35780635f7063ef146101d8578063715018a6146101eb578063859b97fe146101f357600080fd5b80630cbab4f71461013c578063122b0645146101625780631320138514610177578063236040711461018a578063465c731f1461019d575b600080fd5b61014f61014a3660046131c9565b610405565b6040519081526020015b60405180910390f35b6101756101703660046131f7565b610428565b005b61017561018536600461325c565b610949565b61017561019836600461325c565b610a5e565b6101756101ab366004613279565b610ad3565b6101756101be366004613279565b610cf7565b6101cb611019565b60405161015991906132a5565b6101756101e6366004613279565b61107b565b6101756115b0565b610175610201366004613279565b6115c4565b6000546040516001600160a01b039091168152602001610159565b61017561022f3660046132f2565b61194f565b61026061024236600461325c565b6001600160a01b031660009081526004602052604090205460ff1690565b6040519015158152602001610159565b61017561027e3660046131c9565b611cde565b61014f61029136600461333a565b611d3d565b6101756102a436600461335c565b611d5d565b6103606102b7366004613279565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152506001600160a01b03918216600090815260066020908152604080832093835292815290829020825160c081018452815485168152600182015492810192909252600281015484169282019290925260038201549092166060830152600481015460808301526005015460ff16151560a082015290565b604051610159919081516001600160a01b03908116825260208084015190830152604080840151821690830152606080840151909116908201526080808301519082015260a09182015115159181019190915260c00190565b6101756103c73660046132f2565b612137565b6101756103da366004613391565b6124e9565b6101756103ed3660046132f2565b612b4f565b61017561040036600461325c565b6130a6565b60006127106002548361041891906133e9565b6104229190613400565b92915050565b846001600160a01b0381161580159061045957506001600160a01b03811660009081526004602052604090205460ff165b61047e5760405162461bcd60e51b815260040161047590613422565b60405180910390fd5b6001600160a01b0388811660009081526008602081815260408084208c855282529283902083516101808101855281548616808252600183015493820193909352600282015486169481019490945260038101548516606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e08501529182015484166101008401526009820154610120840152600a90910154928316610140830152600160a01b90920460ff1615156101608201528991899190158061054d57508061016001515b6105695760405162461bcd60e51b81526004016104759061344d565b6040516331a9108f60e11b8152600481018b90528b9033906001600160a01b03831690636352211e90602401602060405180830381865afa1580156105b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d69190613484565b6001600160a01b03161461061c5760405162461bcd60e51b815260206004820152600d60248201526c3737ba1037333a1037bbb732b960991b6044820152606401610475565b86861161065e5760405162461bcd60e51b815260206004820152601060248201526f696e76616c696420656e642074696d6560801b6044820152606401610475565b806001600160a01b03166323b872dd33308e6040518463ffffffff1660e01b815260040161068e939291906134a1565b600060405180830381600087803b1580156106a857600080fd5b505af11580156106bc573d6000803e3d6000fd5b505050506040518061018001604052808d6001600160a01b031681526020018c8152602001336001600160a01b031681526020018b6001600160a01b031681526020018a815260200189815260200188815260200187815260200160006001600160a01b031681526020018a815260200160006001600160a01b0316815260200160001515815250600860008e6001600160a01b03166001600160a01b0316815260200190815260200160002060008d815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a0820151816005015560c0820151816006015560e082015181600701556101008201518160080160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550610120820151816009015561014082015181600a0160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555061016082015181600a0160146101000a81548160ff021916908315150217905550905050336001600160a01b03168b8d6001600160a01b03167f15888491dd8f256e5e28ceaf57c0db6819ae0399cc259e9764887563223f7acd8d8d8d8d8d6040516109339594939291906001600160a01b03959095168552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a4505050505050505050505050565b61095161311f565b6001600160a01b0381166109975760405162461bcd60e51b815260206004820152600d60248201526c34b73b30b634b2103a37b5b2b760991b6044820152606401610475565b6001600160a01b03811660009081526004602052604090205460ff16156109f85760405162461bcd60e51b815260206004820152601560248201527430b63932b0b23c903830bcb0b13632903a37b5b2b760591b6044820152606401610475565b6001600160a01b03166000818152600460205260408120805460ff191660019081179091556005805491820181559091527f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db00180546001600160a01b0319169091179055565b610a6661311f565b6001600160a01b038116610ab15760405162461bcd60e51b815260206004820152601260248201527163616e27742062652030206164647265737360701b6044820152606401610475565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038083166000908152600660209081526040808320858452825291829020825160c08101845281548516815260018201549281019290925260028101548416928201839052600381015490931660608201526004830154608082015260059092015460ff16151560a08301528391839115801590610b5a57508060a00151155b610b765760405162461bcd60e51b8152600401610475906134c5565b6001600160a01b038086166000908152600660209081526040808320888452825291829020825160c08101845281548516815260018201549281019290925260028101548416928201839052600381015490931660608201526004830154608082015260059092015460ff16151560a08301523314610c2a5760405162461bcd60e51b815260206004820152601060248201526f3737ba103634b9ba32b21037bbb732b960811b6044820152606401610475565b6040516323b872dd60e01b81526001600160a01b038716906323b872dd90610c5a90309033908a906004016134a1565b600060405180830381600087803b158015610c7457600080fd5b505af1158015610c88573d6000803e3d6000fd5b505050506001600160a01b0395909516600090815260066020908152604080832096835295905293842080546001600160a01b03199081168255600182018690556002820180548216905560038201805490911690556004810194909455505050600501805460ff1916905550565b6001600160a01b03808316600090815260076020908152604080832085845282528083203380855290835292819020815160c08101835281548616815260018201549381019390935260028101548516918301919091526003810154909316606082015260048301546080820181905260059093015460ff16151560a082015284928492919015801590610d97575060408101516001600160a01b031615155b610dd65760405162461bcd60e51b815260206004820152601060248201526f1b9bdd081bd999995c9c9959081b999d60821b6044820152606401610475565b6001600160a01b03808716600090815260076020908152604080832089845282528083203380855290835292819020815160c08101835281548616815260018201549381019390935260028101548516918301829052600381015490941660608301526004840154608083015260059093015460ff16151560a08201529114610e8f5760405162461bcd60e51b815260206004820152600b60248201526a3737ba1037b33332b932b960a91b6044820152606401610475565b8060a0015115610eda5760405162461bcd60e51b81526020600482015260166024820152751bd999995c88185b1c9958591e481858d8d95c1d195960521b6044820152606401610475565b6001600160a01b0380881660009081526007602090815260408083208a8452825280832033845290915280822080546001600160a01b0319908116825560018201849055600282018054821690556003820180549091169055600480820193909355600501805460ff191690556060840151848201516080860151925163a9059cbb60e01b8152919094169363a9059cbb93610f78939192016134e9565b6020604051808303816000875af1158015610f97573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbb9190613502565b5060208101518151606083015160808401516040513394936001600160a01b0316927fefb35510217b7f826a226a55de4a753e6944118842f02b483169782e250c291c92611008926134e9565b60405180910390a450505050505050565b6060600580548060200260200160405190810160405280929190818152602001828054801561107157602002820191906000526020600020905b81546001600160a01b03168152600190910190602001808311611053575b5050505050905090565b6001600160a01b03821660009081526008602090815260408083208484529091529020600a0154600160a01b900460ff16156110ec5760405162461bcd60e51b815260206004820152601060248201526f185b1c9958591e481c995cdd5b1d195960821b6044820152606401610475565b6000546001600160a01b031633148061112c57506001600160a01b0382811660009081526008602090815260408083208584529091529020600201541633145b8061115d57506001600160a01b03828116600090815260086020818152604080842086855290915290912001541633145b6111a95760405162461bcd60e51b815260206004820152601d60248201527f6e6f742063726561746f722c2077696e6e65722c206f72206f776e65720000006044820152606401610475565b6001600160a01b038216600090815260086020908152604080832084845290915290206007015442116112125760405162461bcd60e51b8152602060048201526011602482015270185d58dd1a5bdb881b9bdd08195b991959607a1b6044820152606401610475565b6001600160a01b038083166000818152600860209081526040808320868452825280832060038101548154600a8301805460028501546001600160a81b0319909116908a1617600160a01b179055835163257b706360e21b815293519297918216969116948994909391926395edc18c9260048082019392918290030181865afa1580156112a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112c89190613484565b90506000826001600160a01b031663820bdcdc6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561130a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061132e9190613524565b60098701549091508082156113cc5760006113498484611d3d565b60405163a9059cbb60e01b81529091506001600160a01b0389169063a9059cbb9061137a90889085906004016134e9565b6020604051808303816000875af1158015611399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bd9190613502565b506113c8818361353d565b9150505b60006113d783610405565b60035460405163a9059cbb60e01b81529192506001600160a01b03808b169263a9059cbb9261140c92169085906004016134e9565b6020604051808303816000875af115801561142b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144f9190613502565b5060028901546001600160a01b03808a169163a9059cbb9116611472848661353d565b6040518363ffffffff1660e01b815260040161148f9291906134e9565b6020604051808303816000875af11580156114ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114d29190613502565b50600889015460018a01546040516323b872dd60e01b81526001600160a01b038a8116936323b872dd9361150e933093909216916004016134a1565b600060405180830381600087803b15801561152857600080fd5b505af115801561153c573d6000803e3d6000fd5b50505050600889015460028a015460098b0154604080516001600160a01b03938416815260208101929092523390820152918116918c918e16907f69b9e47c169c6463a921b70743b7d6705d5ee0b376296ae9bf0b1a3678fb3f5d9060600160405180910390a45050505050505050505050565b6115b861311f565b6115c26000613179565b565b6001600160a01b03828116600090815260086020818152604080842086855282529283902083516101808101855281548616808252600183015493820193909352600282015486169481019490945260038101548516606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e08501529182015484166101008401526009820154610120840152600a90910154928316610140830152600160a01b90920460ff1615156101608201528391839190158015906116965750806101600151155b6116b25760405162461bcd60e51b81526004016104759061344d565b6001600160a01b0385811660009081526008602081815260408084208985528252928390208351610180810185528154861681526001820154928101929092526002810154851693820184905260038101548516606083015260048101546080830152600581015460a0830152600681015460c0830152600781015460e08301529182015484166101008201526009820154610120820152600a90910154928316610140820152600160a01b90920460ff16151561016083015233146117b05760405162461bcd60e51b81526020600482015260136024820152723737ba1030bab1ba34b7b71031b932b0ba37b960691b6044820152606401610475565b8060c0015142106118035760405162461bcd60e51b815260206004820152601760248201527f61756374696f6e20616c726561647920737461727465640000000000000000006044820152606401610475565b6101008101516001600160a01b0316156118555760405162461bcd60e51b815260206004820152601360248201527230b63932b0b23c903430bb32903134b23232b960691b6044820152606401610475565b6040516323b872dd60e01b815286906001600160a01b038216906323b872dd9061188790309033908b906004016134a1565b600060405180830381600087803b1580156118a157600080fd5b505af11580156118b5573d6000803e3d6000fd5b5050506001600160a01b03909716600090815260086020818152604080842099845298905296812080546001600160a01b031990811682556001820183905560028201805482169055600382018054821690556004820183905560058201839055600682018390556007820183905597810180549098169097556009870155505050600a90920180546001600160a81b0319169055505050565b6001600160a01b038085166000908152600660209081526040808320878452825291829020825160c08101845281548516815260018201549281019290925260028101548416928201839052600381015490931660608201526004830154608082015260059092015460ff16151560a083015285918591158015906119d657508060a00151155b6119f25760405162461bcd60e51b8152600401610475906134c5565b60008411611a345760405162461bcd60e51b815260206004820152600f60248201526e070726963652063616e206e6f74203608c1b6044820152606401610475565b6001600160a01b0380881660009081526006602090815260408083208a8452825291829020825160c0810184528154851681526001820154928101929092526002810154841682840152600381015490931660608201819052600480850154608084015260059094015460ff16151560a083015291516323b872dd60e01b815290926323b872dd91611acc91339130918b91016134a1565b6020604051808303816000875af1158015611aeb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b0f9190613502565b506040518060c0016040528082600001516001600160a01b0316815260200182602001518152602001336001600160a01b03168152602001876001600160a01b0316815260200186815260200160001515815250600760008a6001600160a01b03166001600160a01b0316815260200190815260200160002060008981526020019081526020016000206000336001600160a01b03166001600160a01b0316815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050336001600160a01b0316816020015182600001516001600160a01b03167f68440885b8f55b92e46c64e6e8e8e58f2cdfeb729aef39fae95e9ac075572129846060015189604051611ccc9291906134e9565b60405180910390a45050505050505050565b611ce661311f565b612710811115611d385760405162461bcd60e51b815260206004820152601d60248201527f63616e2774206265206d6f7265207468616e2031302070657263656e740000006044820152606401610475565b600255565b6000612710611d4c84846133e9565b611d569190613400565b9392505050565b6001600160a01b03838116600090815260086020818152604080842087855282529283902083516101808101855281548616808252600183015493820193909352600282015486169481019490945260038101548516606085015260048101546080850152600581015460a0850152600681015460c0850152600781015460e08501529182015484166101008401526009820154610120840152600a90910154928316610140830152600160a01b90920460ff161515610160820152849184919015801590611e2f5750806101600151155b611e4b5760405162461bcd60e51b81526004016104759061344d565b6001600160a01b0386166000908152600860209081526040808320888452909152902060060154421015611eb55760405162461bcd60e51b8152602060048201526011602482015270185d58dd1a5bdb881b9bdd081cdd185c9d607a1b6044820152606401610475565b6001600160a01b0386166000908152600860209081526040808320888452909152902060070154421115611f1b5760405162461bcd60e51b815260206004820152600d60248201526c185d58dd1a5bdb88195b991959609a1b6044820152606401610475565b6001600160a01b038616600090815260086020908152604080832088845290915290206005810154600990910154611f539190613550565b841015611fa25760405162461bcd60e51b815260206004820152601760248201527f6c657373207468616e206d696e206269642070726963650000000000000000006044820152606401610475565b6001600160a01b03808716600090815260086020908152604080832089845290915290819020600381015491516323b872dd60e01b81529092919091169081906323b872dd90611ffa90339030908b906004016134a1565b6020604051808303816000875af1158015612019573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061203d9190613502565b5060088201546001600160a01b0316156120d4576008820154600983015460405163a9059cbb60e01b81526001600160a01b039283169284169063a9059cbb9061208d90859085906004016134e9565b6020604051808303816000875af11580156120ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120d09190613502565b5050505b6008820180546001600160a01b0319163390811790915560098301879055600383015460405189916001600160a01b038c8116927f1366a066e0b6138abe26f53c966c9de1cfc0f79f586100f5c785c9a5ea19890592611ccc9216908c906134e9565b60405163debe518d60e01b81526001600160a01b03808616600483015285917f00000000000000000000000000000000000000000000000000000000000000009091169063debe518d90602401602060405180830381865afa1580156121a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121c59190613502565b6122025760405162461bcd60e51b815260206004820152600e60248201526d1b9bdd0812dd5a5c195c8813919560921b6044820152606401610475565b826001600160a01b0381161580159061223357506001600160a01b03811660009081526004602052604090205460ff165b61224f5760405162461bcd60e51b815260040161047590613422565b6040516331a9108f60e11b815260048101869052869033906001600160a01b03831690636352211e90602401602060405180830381865afa158015612298573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906122bc9190613484565b6001600160a01b0316146123025760405162461bcd60e51b815260206004820152600d60248201526c3737ba1037333a1037bbb732b960991b6044820152606401610475565b6040516323b872dd60e01b81526001600160a01b038216906323b872dd9061233290339030908b906004016134a1565b600060405180830381600087803b15801561234c57600080fd5b505af1158015612360573d6000803e3d6000fd5b505050506040518060c00160405280886001600160a01b03168152602001878152602001336001600160a01b03168152602001866001600160a01b031681526020018581526020016000151581525060066000896001600160a01b03166001600160a01b03168152602001908152602001600020600088815260200190815260200160002060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b0316021790555060608201518160030160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506080820151816004015560a08201518160050160006101000a81548160ff021916908315150217905550905050336001600160a01b031686886001600160a01b03167fd3c529cf7f810e6effd6ee492c3c44aaaeaab46bb7b4d6d3f01d0aecf487f6b988886040516110089291906134e9565b6001600160a01b03808416600090815260076020908152604080832086845282528083208486168452825291829020825160c08101845281548516815260018201549281019290925260028101548416928201929092526003820154909216606083015260048101546080830181905260059091015460ff16151560a0830152849184918491901580159061258a575060408101516001600160a01b031615155b6125c95760405162461bcd60e51b815260206004820152601060248201526f1b9bdd081bd999995c9c9959081b999d60821b6044820152606401610475565b6001600160a01b0380881660009081526006602090815260408083208a8452825291829020825160c08101845281548516815260018201549281019290925260028101548416928201839052600381015490931660608201526004830154608082015260059092015460ff16151560a0830152889188911580159061265057508060a00151155b61266c5760405162461bcd60e51b8152600401610475906134c5565b6001600160a01b038a811660009081526006602090815260408083208d84529091529020600201541633146126d65760405162461bcd60e51b815260206004820152601060248201526f3737ba103634b9ba32b21037bbb732b960811b6044820152606401610475565b6001600160a01b03808b1660009081526007602090815260408083208d845282528083208c8516845282528083208054909416835260068252808320600185015484529091529020600581015460ff16156127625760405162461bcd60e51b815260206004820152600c60248201526b185b1c9958591e481cdbdb1960a21b6044820152606401610475565b600582015460ff16156127b05760405162461bcd60e51b81526020600482015260166024820152751bd999995c88185b1c9958591e481858d8d95c1d195960521b6044820152606401610475565b60058181018054600160ff199182168117909255918401805490921617905560048083015483546040805163257b706360e21b81529051929384936001600160a01b039093169260009284926395edc18c9282820192602092908290030181865afa158015612823573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128479190613484565b90506000826001600160a01b031663820bdcdc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612889573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ad9190613524565b60038801549091506001600160a01b031681156129535760006128d08388611d3d565b60405163a9059cbb60e01b81529091506001600160a01b0383169063a9059cbb9061290190879085906004016134e9565b6020604051808303816000875af1158015612920573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129449190613502565b5061294f818761353d565b9550505b600061295e87610405565b60035460405163a9059cbb60e01b81529192506001600160a01b038085169263a9059cbb9261299392169085906004016134e9565b6020604051808303816000875af11580156129b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129d69190613502565b5060028801546001600160a01b038084169163a9059cbb91166129f9848a61353d565b6040518363ffffffff1660e01b8152600401612a169291906134e9565b6020604051808303816000875af1158015612a35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a599190613502565b50875460028a015460018a0154604051632142170760e11b81526001600160a01b03938416936342842e0e93612a9893309392909116916004016134a1565b600060405180830381600087803b158015612ab257600080fd5b505af1158015612ac6573d6000803e3d6000fd5b5050505060028881015460018b01548b5460038d015460048e0154948e0154604080516001600160a01b03938416815260208101979097529082169086015292831693919216907f9e4a193680f4538a4b29d70aa5b240ca9068a1d971f7932be2c8b92e6c4b31ce9060600160405180910390a450505050505050505050505050505050505050565b6001600160a01b038085166000908152600660209081526040808320878452825291829020825160c08101845281548516815260018201549281019290925260028101548416928201839052600381015490931660608201526004830154608082015260059092015460ff16151560a08301528591859115801590612bd657508060a00151155b612bf25760405162461bcd60e51b8152600401610475906134c5565b6001600160a01b0380881660009081526006602090815260408083208a8452909152902090861615801590612c36575060038101546001600160a01b038781169116145b612c525760405162461bcd60e51b815260040161047590613422565b600581015460ff1615612c9a5760405162461bcd60e51b815260206004820152601060248201526f1b999d08185b1c9958591e481cdbdb1960821b6044820152606401610475565b8060040154851015612cde5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b6044820152606401610475565b60058101805460ff1916600117905580546040805163257b706360e21b8152905187926001600160a01b03169160009183916395edc18c9160048083019260209291908290030181865afa158015612d3a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d5e9190613484565b90506000826001600160a01b031663820bdcdc6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612da0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dc49190613524565b90508015612e61576000612dd8828b611d3d565b60038701546040516323b872dd60e01b81529192506001600160a01b0316906323b872dd90612e0f903390879086906004016134a1565b6020604051808303816000875af1158015612e2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e529190613502565b50612e5d818661353d565b9450505b6000612e6c8a610405565b60038088015490546040516323b872dd60e01b81529293506001600160a01b03918216926323b872dd92612ea992339291169086906004016134a1565b6020604051808303816000875af1158015612ec8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612eec9190613502565b50600386015460028701546001600160a01b03918216916323b872dd91339116612f16858a61353d565b6040518463ffffffff1660e01b8152600401612f34939291906134a1565b6020604051808303816000875af1158015612f53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f779190613502565b5085546001870154604051632142170760e11b81526001600160a01b03909216916342842e0e91612fae91309133916004016134a1565b600060405180830381600087803b158015612fc857600080fd5b505af1158015612fdc573d6000803e3d6000fd5b50505050336001600160a01b031686600101548760000160009054906101000a90046001600160a01b03166001600160a01b03167f72136ea02664c7ef94168318a5622b2f8cc9e3a3f2bfd6fbdff378aa303e4beb8960030160009054906101000a90046001600160a01b03168e8b60020160009054906101000a90046001600160a01b031660405161308f939291906001600160a01b0393841681526020810192909252909116604082015260600190565b60405180910390a450505050505050505050505050565b6130ae61311f565b6001600160a01b0381166131135760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610475565b61311c81613179565b50565b6000546001600160a01b031633146115c25760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610475565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000602082840312156131db57600080fd5b5035919050565b6001600160a01b038116811461311c57600080fd5b600080600080600080600060e0888a03121561321257600080fd5b873561321d816131e2565b9650602088013595506040880135613234816131e2565b969995985095966060810135965060808101359560a0820135955060c0909101359350915050565b60006020828403121561326e57600080fd5b8135611d56816131e2565b6000806040838503121561328c57600080fd5b8235613297816131e2565b946020939093013593505050565b6020808252825182820181905260009190848201906040850190845b818110156132e65783516001600160a01b0316835292840192918401916001016132c1565b50909695505050505050565b6000806000806080858703121561330857600080fd5b8435613313816131e2565b935060208501359250604085013561332a816131e2565b9396929550929360600135925050565b6000806040838503121561334d57600080fd5b50508035926020909101359150565b60008060006060848603121561337157600080fd5b833561337c816131e2565b95602085013595506040909401359392505050565b6000806000606084860312156133a657600080fd5b83356133b1816131e2565b92506020840135915060408401356133c8816131e2565b809150509250925092565b634e487b7160e01b600052601160045260246000fd5b8082028115828204841417610422576104226133d3565b60008261341d57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526011908201527034b73b30b634b2103830bc903a37b5b2b760791b604082015260600190565b60208082526017908201527f61756374696f6e20616c72656164792063726561746564000000000000000000604082015260600190565b60006020828403121561349657600080fd5b8151611d56816131e2565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6020808252600a90820152691b9bdd081b1a5cdd195960b21b604082015260600190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561351457600080fd5b81518015158114611d5657600080fd5b60006020828403121561353657600080fd5b5051919050565b81810381811115610422576104226133d3565b80820180821115610422576104226133d356fea2646970667358221220a16b0a121e5ab1a999e09c67f9eaef40823426eabbed109906b0b8fb44e03e6c64736f6c63430008110033",
}

// KuiperNFTMarketplaceABI is the input ABI used to generate the binding from.
// Deprecated: Use KuiperNFTMarketplaceMetaData.ABI instead.
var KuiperNFTMarketplaceABI = KuiperNFTMarketplaceMetaData.ABI

// KuiperNFTMarketplaceBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use KuiperNFTMarketplaceMetaData.Bin instead.
var KuiperNFTMarketplaceBin = KuiperNFTMarketplaceMetaData.Bin

// DeployKuiperNFTMarketplace deploys a new Ethereum contract, binding an instance of KuiperNFTMarketplace to it.
func DeployKuiperNFTMarketplace(auth *bind.TransactOpts, backend bind.ContractBackend, _platformFee *big.Int, _feeRecipient common.Address, _kuiperNFTFactory common.Address) (common.Address, *types.Transaction, *KuiperNFTMarketplace, error) {
	parsed, err := KuiperNFTMarketplaceMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(KuiperNFTMarketplaceBin), backend, _platformFee, _feeRecipient, _kuiperNFTFactory)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &KuiperNFTMarketplace{KuiperNFTMarketplaceCaller: KuiperNFTMarketplaceCaller{contract: contract}, KuiperNFTMarketplaceTransactor: KuiperNFTMarketplaceTransactor{contract: contract}, KuiperNFTMarketplaceFilterer: KuiperNFTMarketplaceFilterer{contract: contract}}, nil
}

// KuiperNFTMarketplace is an auto generated Go binding around an Ethereum contract.
type KuiperNFTMarketplace struct {
	KuiperNFTMarketplaceCaller     // Read-only binding to the contract
	KuiperNFTMarketplaceTransactor // Write-only binding to the contract
	KuiperNFTMarketplaceFilterer   // Log filterer for contract events
}

// KuiperNFTMarketplaceCaller is an auto generated read-only Go binding around an Ethereum contract.
type KuiperNFTMarketplaceCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KuiperNFTMarketplaceTransactor is an auto generated write-only Go binding around an Ethereum contract.
type KuiperNFTMarketplaceTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KuiperNFTMarketplaceFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type KuiperNFTMarketplaceFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// KuiperNFTMarketplaceSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type KuiperNFTMarketplaceSession struct {
	Contract     *KuiperNFTMarketplace // Generic contract binding to set the session for
	CallOpts     bind.CallOpts         // Call options to use throughout this session
	TransactOpts bind.TransactOpts     // Transaction auth options to use throughout this session
}

// KuiperNFTMarketplaceCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type KuiperNFTMarketplaceCallerSession struct {
	Contract *KuiperNFTMarketplaceCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts               // Call options to use throughout this session
}

// KuiperNFTMarketplaceTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type KuiperNFTMarketplaceTransactorSession struct {
	Contract     *KuiperNFTMarketplaceTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts               // Transaction auth options to use throughout this session
}

// KuiperNFTMarketplaceRaw is an auto generated low-level Go binding around an Ethereum contract.
type KuiperNFTMarketplaceRaw struct {
	Contract *KuiperNFTMarketplace // Generic contract binding to access the raw methods on
}

// KuiperNFTMarketplaceCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type KuiperNFTMarketplaceCallerRaw struct {
	Contract *KuiperNFTMarketplaceCaller // Generic read-only contract binding to access the raw methods on
}

// KuiperNFTMarketplaceTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type KuiperNFTMarketplaceTransactorRaw struct {
	Contract *KuiperNFTMarketplaceTransactor // Generic write-only contract binding to access the raw methods on
}

// NewKuiperNFTMarketplace creates a new instance of KuiperNFTMarketplace, bound to a specific deployed contract.
func NewKuiperNFTMarketplace(address common.Address, backend bind.ContractBackend) (*KuiperNFTMarketplace, error) {
	contract, err := bindKuiperNFTMarketplace(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplace{KuiperNFTMarketplaceCaller: KuiperNFTMarketplaceCaller{contract: contract}, KuiperNFTMarketplaceTransactor: KuiperNFTMarketplaceTransactor{contract: contract}, KuiperNFTMarketplaceFilterer: KuiperNFTMarketplaceFilterer{contract: contract}}, nil
}

// NewKuiperNFTMarketplaceCaller creates a new read-only instance of KuiperNFTMarketplace, bound to a specific deployed contract.
func NewKuiperNFTMarketplaceCaller(address common.Address, caller bind.ContractCaller) (*KuiperNFTMarketplaceCaller, error) {
	contract, err := bindKuiperNFTMarketplace(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceCaller{contract: contract}, nil
}

// NewKuiperNFTMarketplaceTransactor creates a new write-only instance of KuiperNFTMarketplace, bound to a specific deployed contract.
func NewKuiperNFTMarketplaceTransactor(address common.Address, transactor bind.ContractTransactor) (*KuiperNFTMarketplaceTransactor, error) {
	contract, err := bindKuiperNFTMarketplace(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceTransactor{contract: contract}, nil
}

// NewKuiperNFTMarketplaceFilterer creates a new log filterer instance of KuiperNFTMarketplace, bound to a specific deployed contract.
func NewKuiperNFTMarketplaceFilterer(address common.Address, filterer bind.ContractFilterer) (*KuiperNFTMarketplaceFilterer, error) {
	contract, err := bindKuiperNFTMarketplace(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceFilterer{contract: contract}, nil
}

// bindKuiperNFTMarketplace binds a generic wrapper to an already deployed contract.
func bindKuiperNFTMarketplace(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(KuiperNFTMarketplaceABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KuiperNFTMarketplace.Contract.KuiperNFTMarketplaceCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.KuiperNFTMarketplaceTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.KuiperNFTMarketplaceTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _KuiperNFTMarketplace.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.contract.Transact(opts, method, params...)
}

// CalculatePlatformFee is a free data retrieval call binding the contract method 0x0cbab4f7.
//
// Solidity: function calculatePlatformFee(uint256 _price) view returns(uint256)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCaller) CalculatePlatformFee(opts *bind.CallOpts, _price *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _KuiperNFTMarketplace.contract.Call(opts, &out, "calculatePlatformFee", _price)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculatePlatformFee is a free data retrieval call binding the contract method 0x0cbab4f7.
//
// Solidity: function calculatePlatformFee(uint256 _price) view returns(uint256)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) CalculatePlatformFee(_price *big.Int) (*big.Int, error) {
	return _KuiperNFTMarketplace.Contract.CalculatePlatformFee(&_KuiperNFTMarketplace.CallOpts, _price)
}

// CalculatePlatformFee is a free data retrieval call binding the contract method 0x0cbab4f7.
//
// Solidity: function calculatePlatformFee(uint256 _price) view returns(uint256)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCallerSession) CalculatePlatformFee(_price *big.Int) (*big.Int, error) {
	return _KuiperNFTMarketplace.Contract.CalculatePlatformFee(&_KuiperNFTMarketplace.CallOpts, _price)
}

// CalculateRoyalty is a free data retrieval call binding the contract method 0xb0708a35.
//
// Solidity: function calculateRoyalty(uint256 _royalty, uint256 _price) pure returns(uint256)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCaller) CalculateRoyalty(opts *bind.CallOpts, _royalty *big.Int, _price *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _KuiperNFTMarketplace.contract.Call(opts, &out, "calculateRoyalty", _royalty, _price)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CalculateRoyalty is a free data retrieval call binding the contract method 0xb0708a35.
//
// Solidity: function calculateRoyalty(uint256 _royalty, uint256 _price) pure returns(uint256)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) CalculateRoyalty(_royalty *big.Int, _price *big.Int) (*big.Int, error) {
	return _KuiperNFTMarketplace.Contract.CalculateRoyalty(&_KuiperNFTMarketplace.CallOpts, _royalty, _price)
}

// CalculateRoyalty is a free data retrieval call binding the contract method 0xb0708a35.
//
// Solidity: function calculateRoyalty(uint256 _royalty, uint256 _price) pure returns(uint256)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCallerSession) CalculateRoyalty(_royalty *big.Int, _price *big.Int) (*big.Int, error) {
	return _KuiperNFTMarketplace.Contract.CalculateRoyalty(&_KuiperNFTMarketplace.CallOpts, _royalty, _price)
}

// CheckIsPayableToken is a free data retrieval call binding the contract method 0x9d8f4f55.
//
// Solidity: function checkIsPayableToken(address _payableToken) view returns(bool)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCaller) CheckIsPayableToken(opts *bind.CallOpts, _payableToken common.Address) (bool, error) {
	var out []interface{}
	err := _KuiperNFTMarketplace.contract.Call(opts, &out, "checkIsPayableToken", _payableToken)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// CheckIsPayableToken is a free data retrieval call binding the contract method 0x9d8f4f55.
//
// Solidity: function checkIsPayableToken(address _payableToken) view returns(bool)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) CheckIsPayableToken(_payableToken common.Address) (bool, error) {
	return _KuiperNFTMarketplace.Contract.CheckIsPayableToken(&_KuiperNFTMarketplace.CallOpts, _payableToken)
}

// CheckIsPayableToken is a free data retrieval call binding the contract method 0x9d8f4f55.
//
// Solidity: function checkIsPayableToken(address _payableToken) view returns(bool)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCallerSession) CheckIsPayableToken(_payableToken common.Address) (bool, error) {
	return _KuiperNFTMarketplace.Contract.CheckIsPayableToken(&_KuiperNFTMarketplace.CallOpts, _payableToken)
}

// GetListedNFT is a free data retrieval call binding the contract method 0xdc3c3dfd.
//
// Solidity: function getListedNFT(address _nft, uint256 _tokenId) view returns((address,uint256,address,address,uint256,bool))
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCaller) GetListedNFT(opts *bind.CallOpts, _nft common.Address, _tokenId *big.Int) (KuiperNFTMarketplaceListNFT, error) {
	var out []interface{}
	err := _KuiperNFTMarketplace.contract.Call(opts, &out, "getListedNFT", _nft, _tokenId)

	if err != nil {
		return *new(KuiperNFTMarketplaceListNFT), err
	}

	out0 := *abi.ConvertType(out[0], new(KuiperNFTMarketplaceListNFT)).(*KuiperNFTMarketplaceListNFT)

	return out0, err

}

// GetListedNFT is a free data retrieval call binding the contract method 0xdc3c3dfd.
//
// Solidity: function getListedNFT(address _nft, uint256 _tokenId) view returns((address,uint256,address,address,uint256,bool))
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) GetListedNFT(_nft common.Address, _tokenId *big.Int) (KuiperNFTMarketplaceListNFT, error) {
	return _KuiperNFTMarketplace.Contract.GetListedNFT(&_KuiperNFTMarketplace.CallOpts, _nft, _tokenId)
}

// GetListedNFT is a free data retrieval call binding the contract method 0xdc3c3dfd.
//
// Solidity: function getListedNFT(address _nft, uint256 _tokenId) view returns((address,uint256,address,address,uint256,bool))
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCallerSession) GetListedNFT(_nft common.Address, _tokenId *big.Int) (KuiperNFTMarketplaceListNFT, error) {
	return _KuiperNFTMarketplace.Contract.GetListedNFT(&_KuiperNFTMarketplace.CallOpts, _nft, _tokenId)
}

// GetPayableTokens is a free data retrieval call binding the contract method 0x5b5b3314.
//
// Solidity: function getPayableTokens() view returns(address[])
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCaller) GetPayableTokens(opts *bind.CallOpts) ([]common.Address, error) {
	var out []interface{}
	err := _KuiperNFTMarketplace.contract.Call(opts, &out, "getPayableTokens")

	if err != nil {
		return *new([]common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new([]common.Address)).(*[]common.Address)

	return out0, err

}

// GetPayableTokens is a free data retrieval call binding the contract method 0x5b5b3314.
//
// Solidity: function getPayableTokens() view returns(address[])
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) GetPayableTokens() ([]common.Address, error) {
	return _KuiperNFTMarketplace.Contract.GetPayableTokens(&_KuiperNFTMarketplace.CallOpts)
}

// GetPayableTokens is a free data retrieval call binding the contract method 0x5b5b3314.
//
// Solidity: function getPayableTokens() view returns(address[])
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCallerSession) GetPayableTokens() ([]common.Address, error) {
	return _KuiperNFTMarketplace.Contract.GetPayableTokens(&_KuiperNFTMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _KuiperNFTMarketplace.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) Owner() (common.Address, error) {
	return _KuiperNFTMarketplace.Contract.Owner(&_KuiperNFTMarketplace.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceCallerSession) Owner() (common.Address, error) {
	return _KuiperNFTMarketplace.Contract.Owner(&_KuiperNFTMarketplace.CallOpts)
}

// AcceptOfferNFT is a paid mutator transaction binding the contract method 0xeb95711b.
//
// Solidity: function acceptOfferNFT(address _nft, uint256 _tokenId, address _offerer) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) AcceptOfferNFT(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int, _offerer common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "acceptOfferNFT", _nft, _tokenId, _offerer)
}

// AcceptOfferNFT is a paid mutator transaction binding the contract method 0xeb95711b.
//
// Solidity: function acceptOfferNFT(address _nft, uint256 _tokenId, address _offerer) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) AcceptOfferNFT(_nft common.Address, _tokenId *big.Int, _offerer common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.AcceptOfferNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _offerer)
}

// AcceptOfferNFT is a paid mutator transaction binding the contract method 0xeb95711b.
//
// Solidity: function acceptOfferNFT(address _nft, uint256 _tokenId, address _offerer) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) AcceptOfferNFT(_nft common.Address, _tokenId *big.Int, _offerer common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.AcceptOfferNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _offerer)
}

// AddPayableToken is a paid mutator transaction binding the contract method 0x13201385.
//
// Solidity: function addPayableToken(address _token) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) AddPayableToken(opts *bind.TransactOpts, _token common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "addPayableToken", _token)
}

// AddPayableToken is a paid mutator transaction binding the contract method 0x13201385.
//
// Solidity: function addPayableToken(address _token) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) AddPayableToken(_token common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.AddPayableToken(&_KuiperNFTMarketplace.TransactOpts, _token)
}

// AddPayableToken is a paid mutator transaction binding the contract method 0x13201385.
//
// Solidity: function addPayableToken(address _token) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) AddPayableToken(_token common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.AddPayableToken(&_KuiperNFTMarketplace.TransactOpts, _token)
}

// BidPlace is a paid mutator transaction binding the contract method 0xd863a1a7.
//
// Solidity: function bidPlace(address _nft, uint256 _tokenId, uint256 _bidPrice) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) BidPlace(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int, _bidPrice *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "bidPlace", _nft, _tokenId, _bidPrice)
}

// BidPlace is a paid mutator transaction binding the contract method 0xd863a1a7.
//
// Solidity: function bidPlace(address _nft, uint256 _tokenId, uint256 _bidPrice) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) BidPlace(_nft common.Address, _tokenId *big.Int, _bidPrice *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.BidPlace(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _bidPrice)
}

// BidPlace is a paid mutator transaction binding the contract method 0xd863a1a7.
//
// Solidity: function bidPlace(address _nft, uint256 _tokenId, uint256 _bidPrice) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) BidPlace(_nft common.Address, _tokenId *big.Int, _bidPrice *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.BidPlace(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _bidPrice)
}

// BuyNFT is a paid mutator transaction binding the contract method 0xf01ade78.
//
// Solidity: function buyNFT(address _nft, uint256 _tokenId, address _payToken, uint256 _price) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) BuyNFT(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int, _payToken common.Address, _price *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "buyNFT", _nft, _tokenId, _payToken, _price)
}

// BuyNFT is a paid mutator transaction binding the contract method 0xf01ade78.
//
// Solidity: function buyNFT(address _nft, uint256 _tokenId, address _payToken, uint256 _price) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) BuyNFT(_nft common.Address, _tokenId *big.Int, _payToken common.Address, _price *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.BuyNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _payToken, _price)
}

// BuyNFT is a paid mutator transaction binding the contract method 0xf01ade78.
//
// Solidity: function buyNFT(address _nft, uint256 _tokenId, address _payToken, uint256 _price) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) BuyNFT(_nft common.Address, _tokenId *big.Int, _payToken common.Address, _price *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.BuyNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _payToken, _price)
}

// CancelAuction is a paid mutator transaction binding the contract method 0x859b97fe.
//
// Solidity: function cancelAuction(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) CancelAuction(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "cancelAuction", _nft, _tokenId)
}

// CancelAuction is a paid mutator transaction binding the contract method 0x859b97fe.
//
// Solidity: function cancelAuction(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) CancelAuction(_nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.CancelAuction(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId)
}

// CancelAuction is a paid mutator transaction binding the contract method 0x859b97fe.
//
// Solidity: function cancelAuction(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) CancelAuction(_nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.CancelAuction(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId)
}

// CancelListedNFT is a paid mutator transaction binding the contract method 0x465c731f.
//
// Solidity: function cancelListedNFT(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) CancelListedNFT(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "cancelListedNFT", _nft, _tokenId)
}

// CancelListedNFT is a paid mutator transaction binding the contract method 0x465c731f.
//
// Solidity: function cancelListedNFT(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) CancelListedNFT(_nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.CancelListedNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId)
}

// CancelListedNFT is a paid mutator transaction binding the contract method 0x465c731f.
//
// Solidity: function cancelListedNFT(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) CancelListedNFT(_nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.CancelListedNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId)
}

// CancelOfferNFT is a paid mutator transaction binding the contract method 0x46f5ab31.
//
// Solidity: function cancelOfferNFT(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) CancelOfferNFT(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "cancelOfferNFT", _nft, _tokenId)
}

// CancelOfferNFT is a paid mutator transaction binding the contract method 0x46f5ab31.
//
// Solidity: function cancelOfferNFT(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) CancelOfferNFT(_nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.CancelOfferNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId)
}

// CancelOfferNFT is a paid mutator transaction binding the contract method 0x46f5ab31.
//
// Solidity: function cancelOfferNFT(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) CancelOfferNFT(_nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.CancelOfferNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId)
}

// ChangeFeeRecipient is a paid mutator transaction binding the contract method 0x23604071.
//
// Solidity: function changeFeeRecipient(address _feeRecipient) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) ChangeFeeRecipient(opts *bind.TransactOpts, _feeRecipient common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "changeFeeRecipient", _feeRecipient)
}

// ChangeFeeRecipient is a paid mutator transaction binding the contract method 0x23604071.
//
// Solidity: function changeFeeRecipient(address _feeRecipient) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) ChangeFeeRecipient(_feeRecipient common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.ChangeFeeRecipient(&_KuiperNFTMarketplace.TransactOpts, _feeRecipient)
}

// ChangeFeeRecipient is a paid mutator transaction binding the contract method 0x23604071.
//
// Solidity: function changeFeeRecipient(address _feeRecipient) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) ChangeFeeRecipient(_feeRecipient common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.ChangeFeeRecipient(&_KuiperNFTMarketplace.TransactOpts, _feeRecipient)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x122b0645.
//
// Solidity: function createAuction(address _nft, uint256 _tokenId, address _payToken, uint256 _price, uint256 _minBid, uint256 _startTime, uint256 _endTime) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) CreateAuction(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int, _payToken common.Address, _price *big.Int, _minBid *big.Int, _startTime *big.Int, _endTime *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "createAuction", _nft, _tokenId, _payToken, _price, _minBid, _startTime, _endTime)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x122b0645.
//
// Solidity: function createAuction(address _nft, uint256 _tokenId, address _payToken, uint256 _price, uint256 _minBid, uint256 _startTime, uint256 _endTime) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) CreateAuction(_nft common.Address, _tokenId *big.Int, _payToken common.Address, _price *big.Int, _minBid *big.Int, _startTime *big.Int, _endTime *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.CreateAuction(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _payToken, _price, _minBid, _startTime, _endTime)
}

// CreateAuction is a paid mutator transaction binding the contract method 0x122b0645.
//
// Solidity: function createAuction(address _nft, uint256 _tokenId, address _payToken, uint256 _price, uint256 _minBid, uint256 _startTime, uint256 _endTime) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) CreateAuction(_nft common.Address, _tokenId *big.Int, _payToken common.Address, _price *big.Int, _minBid *big.Int, _startTime *big.Int, _endTime *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.CreateAuction(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _payToken, _price, _minBid, _startTime, _endTime)
}

// ListNft is a paid mutator transaction binding the contract method 0xdcbb63e6.
//
// Solidity: function listNft(address _nft, uint256 _tokenId, address _payToken, uint256 _price) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) ListNft(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int, _payToken common.Address, _price *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "listNft", _nft, _tokenId, _payToken, _price)
}

// ListNft is a paid mutator transaction binding the contract method 0xdcbb63e6.
//
// Solidity: function listNft(address _nft, uint256 _tokenId, address _payToken, uint256 _price) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) ListNft(_nft common.Address, _tokenId *big.Int, _payToken common.Address, _price *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.ListNft(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _payToken, _price)
}

// ListNft is a paid mutator transaction binding the contract method 0xdcbb63e6.
//
// Solidity: function listNft(address _nft, uint256 _tokenId, address _payToken, uint256 _price) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) ListNft(_nft common.Address, _tokenId *big.Int, _payToken common.Address, _price *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.ListNft(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _payToken, _price)
}

// OfferNFT is a paid mutator transaction binding the contract method 0x981b836c.
//
// Solidity: function offerNFT(address _nft, uint256 _tokenId, address _payToken, uint256 _offerPrice) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) OfferNFT(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int, _payToken common.Address, _offerPrice *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "offerNFT", _nft, _tokenId, _payToken, _offerPrice)
}

// OfferNFT is a paid mutator transaction binding the contract method 0x981b836c.
//
// Solidity: function offerNFT(address _nft, uint256 _tokenId, address _payToken, uint256 _offerPrice) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) OfferNFT(_nft common.Address, _tokenId *big.Int, _payToken common.Address, _offerPrice *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.OfferNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _payToken, _offerPrice)
}

// OfferNFT is a paid mutator transaction binding the contract method 0x981b836c.
//
// Solidity: function offerNFT(address _nft, uint256 _tokenId, address _payToken, uint256 _offerPrice) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) OfferNFT(_nft common.Address, _tokenId *big.Int, _payToken common.Address, _offerPrice *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.OfferNFT(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId, _payToken, _offerPrice)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) RenounceOwnership() (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.RenounceOwnership(&_KuiperNFTMarketplace.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.RenounceOwnership(&_KuiperNFTMarketplace.TransactOpts)
}

// ResultAuction is a paid mutator transaction binding the contract method 0x5f7063ef.
//
// Solidity: function resultAuction(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) ResultAuction(opts *bind.TransactOpts, _nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "resultAuction", _nft, _tokenId)
}

// ResultAuction is a paid mutator transaction binding the contract method 0x5f7063ef.
//
// Solidity: function resultAuction(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) ResultAuction(_nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.ResultAuction(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId)
}

// ResultAuction is a paid mutator transaction binding the contract method 0x5f7063ef.
//
// Solidity: function resultAuction(address _nft, uint256 _tokenId) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) ResultAuction(_nft common.Address, _tokenId *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.ResultAuction(&_KuiperNFTMarketplace.TransactOpts, _nft, _tokenId)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.TransferOwnership(&_KuiperNFTMarketplace.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.TransferOwnership(&_KuiperNFTMarketplace.TransactOpts, newOwner)
}

// UpdatePlatformFee is a paid mutator transaction binding the contract method 0xaa0b5988.
//
// Solidity: function updatePlatformFee(uint256 _platformFee) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactor) UpdatePlatformFee(opts *bind.TransactOpts, _platformFee *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.contract.Transact(opts, "updatePlatformFee", _platformFee)
}

// UpdatePlatformFee is a paid mutator transaction binding the contract method 0xaa0b5988.
//
// Solidity: function updatePlatformFee(uint256 _platformFee) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceSession) UpdatePlatformFee(_platformFee *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.UpdatePlatformFee(&_KuiperNFTMarketplace.TransactOpts, _platformFee)
}

// UpdatePlatformFee is a paid mutator transaction binding the contract method 0xaa0b5988.
//
// Solidity: function updatePlatformFee(uint256 _platformFee) returns()
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceTransactorSession) UpdatePlatformFee(_platformFee *big.Int) (*types.Transaction, error) {
	return _KuiperNFTMarketplace.Contract.UpdatePlatformFee(&_KuiperNFTMarketplace.TransactOpts, _platformFee)
}

// KuiperNFTMarketplaceAcceptedNFTIterator is returned from FilterAcceptedNFT and is used to iterate over the raw logs and unpacked data for AcceptedNFT events raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceAcceptedNFTIterator struct {
	Event *KuiperNFTMarketplaceAcceptedNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KuiperNFTMarketplaceAcceptedNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KuiperNFTMarketplaceAcceptedNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KuiperNFTMarketplaceAcceptedNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KuiperNFTMarketplaceAcceptedNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KuiperNFTMarketplaceAcceptedNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KuiperNFTMarketplaceAcceptedNFT represents a AcceptedNFT event raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceAcceptedNFT struct {
	Nft        common.Address
	TokenId    *big.Int
	PayToken   common.Address
	OfferPrice *big.Int
	Offerer    common.Address
	NftOwner   common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterAcceptedNFT is a free log retrieval operation binding the contract event 0x9e4a193680f4538a4b29d70aa5b240ca9068a1d971f7932be2c8b92e6c4b31ce.
//
// Solidity: event AcceptedNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 offerPrice, address offerer, address indexed nftOwner)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) FilterAcceptedNFT(opts *bind.FilterOpts, nft []common.Address, tokenId []*big.Int, nftOwner []common.Address) (*KuiperNFTMarketplaceAcceptedNFTIterator, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var nftOwnerRule []interface{}
	for _, nftOwnerItem := range nftOwner {
		nftOwnerRule = append(nftOwnerRule, nftOwnerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.FilterLogs(opts, "AcceptedNFT", nftRule, tokenIdRule, nftOwnerRule)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceAcceptedNFTIterator{contract: _KuiperNFTMarketplace.contract, event: "AcceptedNFT", logs: logs, sub: sub}, nil
}

// WatchAcceptedNFT is a free log subscription operation binding the contract event 0x9e4a193680f4538a4b29d70aa5b240ca9068a1d971f7932be2c8b92e6c4b31ce.
//
// Solidity: event AcceptedNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 offerPrice, address offerer, address indexed nftOwner)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) WatchAcceptedNFT(opts *bind.WatchOpts, sink chan<- *KuiperNFTMarketplaceAcceptedNFT, nft []common.Address, tokenId []*big.Int, nftOwner []common.Address) (event.Subscription, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var nftOwnerRule []interface{}
	for _, nftOwnerItem := range nftOwner {
		nftOwnerRule = append(nftOwnerRule, nftOwnerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.WatchLogs(opts, "AcceptedNFT", nftRule, tokenIdRule, nftOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KuiperNFTMarketplaceAcceptedNFT)
				if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "AcceptedNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseAcceptedNFT is a log parse operation binding the contract event 0x9e4a193680f4538a4b29d70aa5b240ca9068a1d971f7932be2c8b92e6c4b31ce.
//
// Solidity: event AcceptedNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 offerPrice, address offerer, address indexed nftOwner)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) ParseAcceptedNFT(log types.Log) (*KuiperNFTMarketplaceAcceptedNFT, error) {
	event := new(KuiperNFTMarketplaceAcceptedNFT)
	if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "AcceptedNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KuiperNFTMarketplaceBoughtNFTIterator is returned from FilterBoughtNFT and is used to iterate over the raw logs and unpacked data for BoughtNFT events raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceBoughtNFTIterator struct {
	Event *KuiperNFTMarketplaceBoughtNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KuiperNFTMarketplaceBoughtNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KuiperNFTMarketplaceBoughtNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KuiperNFTMarketplaceBoughtNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KuiperNFTMarketplaceBoughtNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KuiperNFTMarketplaceBoughtNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KuiperNFTMarketplaceBoughtNFT represents a BoughtNFT event raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceBoughtNFT struct {
	Nft      common.Address
	TokenId  *big.Int
	PayToken common.Address
	Price    *big.Int
	Seller   common.Address
	Buyer    common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterBoughtNFT is a free log retrieval operation binding the contract event 0x72136ea02664c7ef94168318a5622b2f8cc9e3a3f2bfd6fbdff378aa303e4beb.
//
// Solidity: event BoughtNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 price, address seller, address indexed buyer)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) FilterBoughtNFT(opts *bind.FilterOpts, nft []common.Address, tokenId []*big.Int, buyer []common.Address) (*KuiperNFTMarketplaceBoughtNFTIterator, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.FilterLogs(opts, "BoughtNFT", nftRule, tokenIdRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceBoughtNFTIterator{contract: _KuiperNFTMarketplace.contract, event: "BoughtNFT", logs: logs, sub: sub}, nil
}

// WatchBoughtNFT is a free log subscription operation binding the contract event 0x72136ea02664c7ef94168318a5622b2f8cc9e3a3f2bfd6fbdff378aa303e4beb.
//
// Solidity: event BoughtNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 price, address seller, address indexed buyer)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) WatchBoughtNFT(opts *bind.WatchOpts, sink chan<- *KuiperNFTMarketplaceBoughtNFT, nft []common.Address, tokenId []*big.Int, buyer []common.Address) (event.Subscription, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var buyerRule []interface{}
	for _, buyerItem := range buyer {
		buyerRule = append(buyerRule, buyerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.WatchLogs(opts, "BoughtNFT", nftRule, tokenIdRule, buyerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KuiperNFTMarketplaceBoughtNFT)
				if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "BoughtNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseBoughtNFT is a log parse operation binding the contract event 0x72136ea02664c7ef94168318a5622b2f8cc9e3a3f2bfd6fbdff378aa303e4beb.
//
// Solidity: event BoughtNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 price, address seller, address indexed buyer)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) ParseBoughtNFT(log types.Log) (*KuiperNFTMarketplaceBoughtNFT, error) {
	event := new(KuiperNFTMarketplaceBoughtNFT)
	if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "BoughtNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KuiperNFTMarketplaceCanceledOfferredNFTIterator is returned from FilterCanceledOfferredNFT and is used to iterate over the raw logs and unpacked data for CanceledOfferredNFT events raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceCanceledOfferredNFTIterator struct {
	Event *KuiperNFTMarketplaceCanceledOfferredNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KuiperNFTMarketplaceCanceledOfferredNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KuiperNFTMarketplaceCanceledOfferredNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KuiperNFTMarketplaceCanceledOfferredNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KuiperNFTMarketplaceCanceledOfferredNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KuiperNFTMarketplaceCanceledOfferredNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KuiperNFTMarketplaceCanceledOfferredNFT represents a CanceledOfferredNFT event raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceCanceledOfferredNFT struct {
	Nft        common.Address
	TokenId    *big.Int
	PayToken   common.Address
	OfferPrice *big.Int
	Offerer    common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterCanceledOfferredNFT is a free log retrieval operation binding the contract event 0xefb35510217b7f826a226a55de4a753e6944118842f02b483169782e250c291c.
//
// Solidity: event CanceledOfferredNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 offerPrice, address indexed offerer)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) FilterCanceledOfferredNFT(opts *bind.FilterOpts, nft []common.Address, tokenId []*big.Int, offerer []common.Address) (*KuiperNFTMarketplaceCanceledOfferredNFTIterator, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var offererRule []interface{}
	for _, offererItem := range offerer {
		offererRule = append(offererRule, offererItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.FilterLogs(opts, "CanceledOfferredNFT", nftRule, tokenIdRule, offererRule)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceCanceledOfferredNFTIterator{contract: _KuiperNFTMarketplace.contract, event: "CanceledOfferredNFT", logs: logs, sub: sub}, nil
}

// WatchCanceledOfferredNFT is a free log subscription operation binding the contract event 0xefb35510217b7f826a226a55de4a753e6944118842f02b483169782e250c291c.
//
// Solidity: event CanceledOfferredNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 offerPrice, address indexed offerer)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) WatchCanceledOfferredNFT(opts *bind.WatchOpts, sink chan<- *KuiperNFTMarketplaceCanceledOfferredNFT, nft []common.Address, tokenId []*big.Int, offerer []common.Address) (event.Subscription, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var offererRule []interface{}
	for _, offererItem := range offerer {
		offererRule = append(offererRule, offererItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.WatchLogs(opts, "CanceledOfferredNFT", nftRule, tokenIdRule, offererRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KuiperNFTMarketplaceCanceledOfferredNFT)
				if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "CanceledOfferredNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCanceledOfferredNFT is a log parse operation binding the contract event 0xefb35510217b7f826a226a55de4a753e6944118842f02b483169782e250c291c.
//
// Solidity: event CanceledOfferredNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 offerPrice, address indexed offerer)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) ParseCanceledOfferredNFT(log types.Log) (*KuiperNFTMarketplaceCanceledOfferredNFT, error) {
	event := new(KuiperNFTMarketplaceCanceledOfferredNFT)
	if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "CanceledOfferredNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KuiperNFTMarketplaceCreatedAuctionIterator is returned from FilterCreatedAuction and is used to iterate over the raw logs and unpacked data for CreatedAuction events raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceCreatedAuctionIterator struct {
	Event *KuiperNFTMarketplaceCreatedAuction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KuiperNFTMarketplaceCreatedAuctionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KuiperNFTMarketplaceCreatedAuction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KuiperNFTMarketplaceCreatedAuction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KuiperNFTMarketplaceCreatedAuctionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KuiperNFTMarketplaceCreatedAuctionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KuiperNFTMarketplaceCreatedAuction represents a CreatedAuction event raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceCreatedAuction struct {
	Nft       common.Address
	TokenId   *big.Int
	PayToken  common.Address
	Price     *big.Int
	MinBid    *big.Int
	StartTime *big.Int
	EndTime   *big.Int
	Creator   common.Address
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterCreatedAuction is a free log retrieval operation binding the contract event 0x15888491dd8f256e5e28ceaf57c0db6819ae0399cc259e9764887563223f7acd.
//
// Solidity: event CreatedAuction(address indexed nft, uint256 indexed tokenId, address payToken, uint256 price, uint256 minBid, uint256 startTime, uint256 endTime, address indexed creator)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) FilterCreatedAuction(opts *bind.FilterOpts, nft []common.Address, tokenId []*big.Int, creator []common.Address) (*KuiperNFTMarketplaceCreatedAuctionIterator, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.FilterLogs(opts, "CreatedAuction", nftRule, tokenIdRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceCreatedAuctionIterator{contract: _KuiperNFTMarketplace.contract, event: "CreatedAuction", logs: logs, sub: sub}, nil
}

// WatchCreatedAuction is a free log subscription operation binding the contract event 0x15888491dd8f256e5e28ceaf57c0db6819ae0399cc259e9764887563223f7acd.
//
// Solidity: event CreatedAuction(address indexed nft, uint256 indexed tokenId, address payToken, uint256 price, uint256 minBid, uint256 startTime, uint256 endTime, address indexed creator)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) WatchCreatedAuction(opts *bind.WatchOpts, sink chan<- *KuiperNFTMarketplaceCreatedAuction, nft []common.Address, tokenId []*big.Int, creator []common.Address) (event.Subscription, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var creatorRule []interface{}
	for _, creatorItem := range creator {
		creatorRule = append(creatorRule, creatorItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.WatchLogs(opts, "CreatedAuction", nftRule, tokenIdRule, creatorRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KuiperNFTMarketplaceCreatedAuction)
				if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "CreatedAuction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseCreatedAuction is a log parse operation binding the contract event 0x15888491dd8f256e5e28ceaf57c0db6819ae0399cc259e9764887563223f7acd.
//
// Solidity: event CreatedAuction(address indexed nft, uint256 indexed tokenId, address payToken, uint256 price, uint256 minBid, uint256 startTime, uint256 endTime, address indexed creator)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) ParseCreatedAuction(log types.Log) (*KuiperNFTMarketplaceCreatedAuction, error) {
	event := new(KuiperNFTMarketplaceCreatedAuction)
	if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "CreatedAuction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KuiperNFTMarketplaceListedNFTIterator is returned from FilterListedNFT and is used to iterate over the raw logs and unpacked data for ListedNFT events raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceListedNFTIterator struct {
	Event *KuiperNFTMarketplaceListedNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KuiperNFTMarketplaceListedNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KuiperNFTMarketplaceListedNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KuiperNFTMarketplaceListedNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KuiperNFTMarketplaceListedNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KuiperNFTMarketplaceListedNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KuiperNFTMarketplaceListedNFT represents a ListedNFT event raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceListedNFT struct {
	Nft      common.Address
	TokenId  *big.Int
	PayToken common.Address
	Price    *big.Int
	Seller   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterListedNFT is a free log retrieval operation binding the contract event 0xd3c529cf7f810e6effd6ee492c3c44aaaeaab46bb7b4d6d3f01d0aecf487f6b9.
//
// Solidity: event ListedNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 price, address indexed seller)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) FilterListedNFT(opts *bind.FilterOpts, nft []common.Address, tokenId []*big.Int, seller []common.Address) (*KuiperNFTMarketplaceListedNFTIterator, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.FilterLogs(opts, "ListedNFT", nftRule, tokenIdRule, sellerRule)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceListedNFTIterator{contract: _KuiperNFTMarketplace.contract, event: "ListedNFT", logs: logs, sub: sub}, nil
}

// WatchListedNFT is a free log subscription operation binding the contract event 0xd3c529cf7f810e6effd6ee492c3c44aaaeaab46bb7b4d6d3f01d0aecf487f6b9.
//
// Solidity: event ListedNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 price, address indexed seller)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) WatchListedNFT(opts *bind.WatchOpts, sink chan<- *KuiperNFTMarketplaceListedNFT, nft []common.Address, tokenId []*big.Int, seller []common.Address) (event.Subscription, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var sellerRule []interface{}
	for _, sellerItem := range seller {
		sellerRule = append(sellerRule, sellerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.WatchLogs(opts, "ListedNFT", nftRule, tokenIdRule, sellerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KuiperNFTMarketplaceListedNFT)
				if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "ListedNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseListedNFT is a log parse operation binding the contract event 0xd3c529cf7f810e6effd6ee492c3c44aaaeaab46bb7b4d6d3f01d0aecf487f6b9.
//
// Solidity: event ListedNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 price, address indexed seller)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) ParseListedNFT(log types.Log) (*KuiperNFTMarketplaceListedNFT, error) {
	event := new(KuiperNFTMarketplaceListedNFT)
	if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "ListedNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KuiperNFTMarketplaceOfferredNFTIterator is returned from FilterOfferredNFT and is used to iterate over the raw logs and unpacked data for OfferredNFT events raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceOfferredNFTIterator struct {
	Event *KuiperNFTMarketplaceOfferredNFT // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KuiperNFTMarketplaceOfferredNFTIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KuiperNFTMarketplaceOfferredNFT)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KuiperNFTMarketplaceOfferredNFT)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KuiperNFTMarketplaceOfferredNFTIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KuiperNFTMarketplaceOfferredNFTIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KuiperNFTMarketplaceOfferredNFT represents a OfferredNFT event raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceOfferredNFT struct {
	Nft        common.Address
	TokenId    *big.Int
	PayToken   common.Address
	OfferPrice *big.Int
	Offerer    common.Address
	Raw        types.Log // Blockchain specific contextual infos
}

// FilterOfferredNFT is a free log retrieval operation binding the contract event 0x68440885b8f55b92e46c64e6e8e8e58f2cdfeb729aef39fae95e9ac075572129.
//
// Solidity: event OfferredNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 offerPrice, address indexed offerer)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) FilterOfferredNFT(opts *bind.FilterOpts, nft []common.Address, tokenId []*big.Int, offerer []common.Address) (*KuiperNFTMarketplaceOfferredNFTIterator, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var offererRule []interface{}
	for _, offererItem := range offerer {
		offererRule = append(offererRule, offererItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.FilterLogs(opts, "OfferredNFT", nftRule, tokenIdRule, offererRule)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceOfferredNFTIterator{contract: _KuiperNFTMarketplace.contract, event: "OfferredNFT", logs: logs, sub: sub}, nil
}

// WatchOfferredNFT is a free log subscription operation binding the contract event 0x68440885b8f55b92e46c64e6e8e8e58f2cdfeb729aef39fae95e9ac075572129.
//
// Solidity: event OfferredNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 offerPrice, address indexed offerer)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) WatchOfferredNFT(opts *bind.WatchOpts, sink chan<- *KuiperNFTMarketplaceOfferredNFT, nft []common.Address, tokenId []*big.Int, offerer []common.Address) (event.Subscription, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var offererRule []interface{}
	for _, offererItem := range offerer {
		offererRule = append(offererRule, offererItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.WatchLogs(opts, "OfferredNFT", nftRule, tokenIdRule, offererRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KuiperNFTMarketplaceOfferredNFT)
				if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "OfferredNFT", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOfferredNFT is a log parse operation binding the contract event 0x68440885b8f55b92e46c64e6e8e8e58f2cdfeb729aef39fae95e9ac075572129.
//
// Solidity: event OfferredNFT(address indexed nft, uint256 indexed tokenId, address payToken, uint256 offerPrice, address indexed offerer)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) ParseOfferredNFT(log types.Log) (*KuiperNFTMarketplaceOfferredNFT, error) {
	event := new(KuiperNFTMarketplaceOfferredNFT)
	if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "OfferredNFT", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KuiperNFTMarketplaceOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceOwnershipTransferredIterator struct {
	Event *KuiperNFTMarketplaceOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KuiperNFTMarketplaceOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KuiperNFTMarketplaceOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KuiperNFTMarketplaceOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KuiperNFTMarketplaceOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KuiperNFTMarketplaceOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KuiperNFTMarketplaceOwnershipTransferred represents a OwnershipTransferred event raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*KuiperNFTMarketplaceOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceOwnershipTransferredIterator{contract: _KuiperNFTMarketplace.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *KuiperNFTMarketplaceOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KuiperNFTMarketplaceOwnershipTransferred)
				if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) ParseOwnershipTransferred(log types.Log) (*KuiperNFTMarketplaceOwnershipTransferred, error) {
	event := new(KuiperNFTMarketplaceOwnershipTransferred)
	if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KuiperNFTMarketplacePlacedBidIterator is returned from FilterPlacedBid and is used to iterate over the raw logs and unpacked data for PlacedBid events raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplacePlacedBidIterator struct {
	Event *KuiperNFTMarketplacePlacedBid // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KuiperNFTMarketplacePlacedBidIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KuiperNFTMarketplacePlacedBid)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KuiperNFTMarketplacePlacedBid)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KuiperNFTMarketplacePlacedBidIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KuiperNFTMarketplacePlacedBidIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KuiperNFTMarketplacePlacedBid represents a PlacedBid event raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplacePlacedBid struct {
	Nft      common.Address
	TokenId  *big.Int
	PayToken common.Address
	BidPrice *big.Int
	Bidder   common.Address
	Raw      types.Log // Blockchain specific contextual infos
}

// FilterPlacedBid is a free log retrieval operation binding the contract event 0x1366a066e0b6138abe26f53c966c9de1cfc0f79f586100f5c785c9a5ea198905.
//
// Solidity: event PlacedBid(address indexed nft, uint256 indexed tokenId, address payToken, uint256 bidPrice, address indexed bidder)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) FilterPlacedBid(opts *bind.FilterOpts, nft []common.Address, tokenId []*big.Int, bidder []common.Address) (*KuiperNFTMarketplacePlacedBidIterator, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var bidderRule []interface{}
	for _, bidderItem := range bidder {
		bidderRule = append(bidderRule, bidderItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.FilterLogs(opts, "PlacedBid", nftRule, tokenIdRule, bidderRule)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplacePlacedBidIterator{contract: _KuiperNFTMarketplace.contract, event: "PlacedBid", logs: logs, sub: sub}, nil
}

// WatchPlacedBid is a free log subscription operation binding the contract event 0x1366a066e0b6138abe26f53c966c9de1cfc0f79f586100f5c785c9a5ea198905.
//
// Solidity: event PlacedBid(address indexed nft, uint256 indexed tokenId, address payToken, uint256 bidPrice, address indexed bidder)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) WatchPlacedBid(opts *bind.WatchOpts, sink chan<- *KuiperNFTMarketplacePlacedBid, nft []common.Address, tokenId []*big.Int, bidder []common.Address) (event.Subscription, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var bidderRule []interface{}
	for _, bidderItem := range bidder {
		bidderRule = append(bidderRule, bidderItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.WatchLogs(opts, "PlacedBid", nftRule, tokenIdRule, bidderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KuiperNFTMarketplacePlacedBid)
				if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "PlacedBid", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePlacedBid is a log parse operation binding the contract event 0x1366a066e0b6138abe26f53c966c9de1cfc0f79f586100f5c785c9a5ea198905.
//
// Solidity: event PlacedBid(address indexed nft, uint256 indexed tokenId, address payToken, uint256 bidPrice, address indexed bidder)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) ParsePlacedBid(log types.Log) (*KuiperNFTMarketplacePlacedBid, error) {
	event := new(KuiperNFTMarketplacePlacedBid)
	if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "PlacedBid", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// KuiperNFTMarketplaceResultedAuctionIterator is returned from FilterResultedAuction and is used to iterate over the raw logs and unpacked data for ResultedAuction events raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceResultedAuctionIterator struct {
	Event *KuiperNFTMarketplaceResultedAuction // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *KuiperNFTMarketplaceResultedAuctionIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(KuiperNFTMarketplaceResultedAuction)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(KuiperNFTMarketplaceResultedAuction)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *KuiperNFTMarketplaceResultedAuctionIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *KuiperNFTMarketplaceResultedAuctionIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// KuiperNFTMarketplaceResultedAuction represents a ResultedAuction event raised by the KuiperNFTMarketplace contract.
type KuiperNFTMarketplaceResultedAuction struct {
	Nft     common.Address
	TokenId *big.Int
	Creator common.Address
	Winner  common.Address
	Price   *big.Int
	Caller  common.Address
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterResultedAuction is a free log retrieval operation binding the contract event 0x69b9e47c169c6463a921b70743b7d6705d5ee0b376296ae9bf0b1a3678fb3f5d.
//
// Solidity: event ResultedAuction(address indexed nft, uint256 indexed tokenId, address creator, address indexed winner, uint256 price, address caller)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) FilterResultedAuction(opts *bind.FilterOpts, nft []common.Address, tokenId []*big.Int, winner []common.Address) (*KuiperNFTMarketplaceResultedAuctionIterator, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.FilterLogs(opts, "ResultedAuction", nftRule, tokenIdRule, winnerRule)
	if err != nil {
		return nil, err
	}
	return &KuiperNFTMarketplaceResultedAuctionIterator{contract: _KuiperNFTMarketplace.contract, event: "ResultedAuction", logs: logs, sub: sub}, nil
}

// WatchResultedAuction is a free log subscription operation binding the contract event 0x69b9e47c169c6463a921b70743b7d6705d5ee0b376296ae9bf0b1a3678fb3f5d.
//
// Solidity: event ResultedAuction(address indexed nft, uint256 indexed tokenId, address creator, address indexed winner, uint256 price, address caller)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) WatchResultedAuction(opts *bind.WatchOpts, sink chan<- *KuiperNFTMarketplaceResultedAuction, nft []common.Address, tokenId []*big.Int, winner []common.Address) (event.Subscription, error) {

	var nftRule []interface{}
	for _, nftItem := range nft {
		nftRule = append(nftRule, nftItem)
	}
	var tokenIdRule []interface{}
	for _, tokenIdItem := range tokenId {
		tokenIdRule = append(tokenIdRule, tokenIdItem)
	}

	var winnerRule []interface{}
	for _, winnerItem := range winner {
		winnerRule = append(winnerRule, winnerItem)
	}

	logs, sub, err := _KuiperNFTMarketplace.contract.WatchLogs(opts, "ResultedAuction", nftRule, tokenIdRule, winnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(KuiperNFTMarketplaceResultedAuction)
				if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "ResultedAuction", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseResultedAuction is a log parse operation binding the contract event 0x69b9e47c169c6463a921b70743b7d6705d5ee0b376296ae9bf0b1a3678fb3f5d.
//
// Solidity: event ResultedAuction(address indexed nft, uint256 indexed tokenId, address creator, address indexed winner, uint256 price, address caller)
func (_KuiperNFTMarketplace *KuiperNFTMarketplaceFilterer) ParseResultedAuction(log types.Log) (*KuiperNFTMarketplaceResultedAuction, error) {
	event := new(KuiperNFTMarketplaceResultedAuction)
	if err := _KuiperNFTMarketplace.contract.UnpackLog(event, "ResultedAuction", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
